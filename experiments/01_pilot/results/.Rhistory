label = "LengthWeight:",
min = 0, max = 1, value = 0, step = 0.25),
sliderInput("typWeight",
label = "TypicalityWeight",
min = 0, max = 10, value = 6, step = 2)
),
mainPanel(
useShinyjs(),
div(
id = "loading_page",
# h3("Loading...", align="center"),
tags$img(src="load_data.gif",height=200, align="middle")
),
hidden(
div(
id = "ready",
tabsetPanel(
tabPanel("Plot",
plotOutput("plot2"),
img(src='utterance_by_conttyp_poster.png', height = 400)),
tabPanel("Compare", plotOutput("plot3"), textOutput("corr"), textOutput("corr2"))
)
)
)
)
)
),
server = function(input, output) {
dat <- reactive({
test <- df[df$alpha == input$alpha & df$colorCost == input$colorcost & df$typeCost == input$typecost & df$lengthWeight == input$lengthWeight & df$typWeight == input$typWeight,]
})
hide("loading_page")
shinyjs::show("ready")
output$plot2<-renderPlot({
ggplot(dat(), aes(x=Typicality,y=modelPrediction,color=uttType)) +
geom_point(size=1) +
geom_smooth(method="lm",size=1.3) +
#geom_errorbar(aes(ymin=YMin,ymax=YMax),width=.25) +
facet_wrap(~condition) +
coord_cartesian(ylim=c(0,1)) +
# ylim(0,1) +
#green, turquoise, red
scale_color_manual(name="Utterance",
breaks=c("typeOnly", "colorOnly", "colorType"),
labels=c("Only Type", "Only Color", "Color + Type"),
values=c("#799938", "#5bc2b7", "#ef6666")) +
theme(axis.title=element_text(size=14,colour="#757575")) +
theme(axis.title=element_text(size=14,colour="#757575")) +
theme(axis.text.x=element_text(size=10,colour="#757575")) +
theme(axis.text.y=element_text(size=10,colour="#757575")) +
theme(axis.ticks=element_line(size=.25,colour="#757575"), axis.ticks.length=unit(.75,"mm")) +
theme(strip.text.x=element_text(size=18,colour="#757575")) +
theme(legend.position="top",legend.box="horizontal") +
theme(legend.title=element_text(size=15,color="#757575")) +
theme(legend.text=element_text(size=12,colour="#757575")) +
theme(strip.background=element_rect(colour="#939393",fill="white")) +
theme(panel.background=element_rect(colour="#939393"))
},height = 400,width = 550)
output$plot3 <- renderPlot({
ggplot(dat(), aes(x=modelPrediction,y=empiricProb)) +
geom_point() +
geom_abline() +
coord_cartesian(ylim=c(0,1)) +
coord_cartesian(xlim=c(0,1)) +
theme(legend.position="bottom", aspect.ratio = 1) +
geom_smooth(method="lm",size=1.3)
})
output$corr <- reactive({
full_data <- dat()
text <- paste("Correlation coefficient for all data: ", round(cor.test(full_data$empiricProb,full_data$modelPrediction)$estimate,4)*100,"% (",nrow(full_data)," data points )")
})
output$corr2 <- reactive({
inThreshold <- dat()[dat()$modelPrediction <= .99 & dat()$modelPrediction >= .01,]
text <- paste("Correlation coefficient in boundaries 1% - 99% in modelPrediction: ", round(cor.test(inThreshold$empiricProb,inThreshold$modelPrediction)$estimate,4)*100,"% (",nrow(inThreshold)," data points )")
})
},
options = list(height = 500)
)
library(dplyr)
library(ggplot2)
library(bootstrap)
library(lme4)
library(tidyr)
library(shiny)
library(shinyjs)
shinyApp(
source("helpers.R"),
theme_set(theme_bw(18)),
# runApp("rscripts/app")
df <- read.table(file="data/allDataPredictives.csv",sep=",", header=T,check.names = FALSE),
ui = fluidPage(
titlePanel("Overinformativeness Model Visualizations"),
sidebarLayout(
sidebarPanel(
h4("Parameters"),
helpText("Set parameters"),
sliderInput("alpha",
label = "Alpha:",
min = 0, max = 18, value = 18, step = 2),
sliderInput("colorcost",
label = "Cost for mentioning color:",
min = -3, max = 3, value = 0, step = 1.5),
sliderInput("typecost",
label = "Cost for mentioning type:",
min = -3, max = 3, value = -1.5, step = 1.5),
sliderInput("lengthWeight",
label = "LengthWeight:",
min = 0, max = 1, value = 0, step = 0.25),
sliderInput("typWeight",
label = "TypicalityWeight",
min = 0, max = 10, value = 6, step = 2)
),
mainPanel(
useShinyjs(),
div(
id = "loading_page",
# h3("Loading...", align="center"),
tags$img(src="load_data.gif",height=200, align="middle")
),
hidden(
div(
id = "ready",
tabsetPanel(
tabPanel("Plot",
plotOutput("plot2"),
img(src='utterance_by_conttyp_poster.png', height = 400)),
tabPanel("Compare", plotOutput("plot3"), textOutput("corr"), textOutput("corr2"))
)
)
)
)
)
),
server = function(input, output) {
dat <- reactive({
test <- df[df$alpha == input$alpha & df$colorCost == input$colorcost & df$typeCost == input$typecost & df$lengthWeight == input$lengthWeight & df$typWeight == input$typWeight,]
})
hide("loading_page")
shinyjs::show("ready")
output$plot2<-renderPlot({
ggplot(dat(), aes(x=Typicality,y=modelPrediction,color=uttType)) +
geom_point(size=1) +
geom_smooth(method="lm",size=1.3) +
#geom_errorbar(aes(ymin=YMin,ymax=YMax),width=.25) +
facet_wrap(~condition) +
coord_cartesian(ylim=c(0,1)) +
# ylim(0,1) +
#green, turquoise, red
scale_color_manual(name="Utterance",
breaks=c("typeOnly", "colorOnly", "colorType"),
labels=c("Only Type", "Only Color", "Color + Type"),
values=c("#799938", "#5bc2b7", "#ef6666")) +
theme(axis.title=element_text(size=14,colour="#757575")) +
theme(axis.title=element_text(size=14,colour="#757575")) +
theme(axis.text.x=element_text(size=10,colour="#757575")) +
theme(axis.text.y=element_text(size=10,colour="#757575")) +
theme(axis.ticks=element_line(size=.25,colour="#757575"), axis.ticks.length=unit(.75,"mm")) +
theme(strip.text.x=element_text(size=18,colour="#757575")) +
theme(legend.position="top",legend.box="horizontal") +
theme(legend.title=element_text(size=15,color="#757575")) +
theme(legend.text=element_text(size=12,colour="#757575")) +
theme(strip.background=element_rect(colour="#939393",fill="white")) +
theme(panel.background=element_rect(colour="#939393"))
},height = 400,width = 550)
output$plot3 <- renderPlot({
ggplot(dat(), aes(x=modelPrediction,y=empiricProb)) +
geom_point() +
geom_abline() +
coord_cartesian(ylim=c(0,1)) +
coord_cartesian(xlim=c(0,1)) +
theme(legend.position="bottom", aspect.ratio = 1) +
geom_smooth(method="lm",size=1.3)
})
output$corr <- reactive({
full_data <- dat()
text <- paste("Correlation coefficient for all data: ", round(cor.test(full_data$empiricProb,full_data$modelPrediction)$estimate,4)*100,"% (",nrow(full_data)," data points )")
})
output$corr2 <- reactive({
inThreshold <- dat()[dat()$modelPrediction <= .99 & dat()$modelPrediction >= .01,]
text <- paste("Correlation coefficient in boundaries 1% - 99% in modelPrediction: ", round(cor.test(inThreshold$empiricProb,inThreshold$modelPrediction)$estimate,4)*100,"% (",nrow(inThreshold)," data points )")
})
},
options = list(height = 500)
)
library(dplyr)
library(ggplot2)
library(bootstrap)
library(lme4)
library(tidyr)
theme_set(theme_bw(18))
setwd("/Users/elisakreiss/Documents/Stanford/overinformativeness/experiments/elisa_paper_relevant/interactiveReferenceGame/results/rscripts")
df_nonoise <- read.table(file="data/allDataPredictives.csv",sep=",", header=T,check.names = FALSE)
head(df_nonoise)
df_addnoise1 <- read.table(file="data/vizNoiseAddPredictives_1.csv",sep=",", header=T,check.names = FALSE)
df_addnoise2 <- read.table(file="data/vizNoiseAddPredictives_2.csv",sep=",", header=T,check.names = FALSE)
df_addnoise3 <- read.table(file="data/vizNoiseAddPredictives_3.csv",sep=",", header=T,check.names = FALSE)
df_addnoise <- rbind(df_addnoise1, df_addnoise2, df_addnoise3)
head(df_addnoise1)
head(df_addnoise)
nrow(df_addnoise)
nrow(df_addnoise1)
nrow(df_addnoise2)
nrow(df_addnoise3)
typ <- read.table(file="meantyp_short.csv",sep=",", header=T,check.names = FALSE)
typ <- read.table(file="data/meantyp_short.csv",sep=",", header=T,check.names = FALSE)
head(typ)
typ$Combo = typ$Color + "_" + typ$Item
typ$Combo = paste(typ$Color,typ$Item,sep = "_")
head(typ)
df_addnoise$Typicality = typ[typ$Combo == df_addnoise$obj,]$Typicality
df_addnoise$Typicality = typ$Typicality[typ$Combo == df_addnoise$obj,]
typ$obj = paste(typ$Color,typ$Item,sep = "_")
df_addnoise$Typicality = merge(df_addnoise,typ$Typicality, by=c("obj"))
head(typ)
df_addnoise$Typicality = merge(df_addnoise,typ, by=c("obj"))
head(df_addnoise)
typ <- read.table(file="data/meantyp_short.csv",sep=",", header=T,check.names = FALSE)
typ$obj = paste(typ$Color,typ$Item,sep = "_")
typ <- read.table(file="data/meantyp_short.csv",sep=",", header=T,check.names = FALSE)
typ$Combo = paste(typ$Color,typ$Item,sep = "_")
df_nonoise <- read.table(file="data/allDataPredictives.csv",sep=",", header=T,check.names = FALSE)
df_addnoise1 <- read.table(file="data/vizNoiseAddPredictives_1.csv",sep=",", header=T,check.names = FALSE)
df_addnoise2 <- read.table(file="data/vizNoiseAddPredictives_2.csv",sep=",", header=T,check.names = FALSE)
df_addnoise3 <- read.table(file="data/vizNoiseAddPredictives_3.csv",sep=",", header=T,check.names = FALSE)
df_addnoise <- rbind(df_addnoise1, df_addnoise2, df_addnoise3)
df_addnoise$Typicality = ifelse(df_addnoise$obj == typ$Combo,typ$Typicality,NULL)
df_addnoise$Typicality = ifelse(df_addnoise$obj == typ$Combo,typ$Typicality,0)
head(df_addnoise)
head(typ)
df_addnoise$Typicality = typ$Typicality[typ$Combo == df_addnoise$obj,]
df_addnoise$Typicality = typ$Typicality[typ$Combo == df_addnoise$obj,c("Typicality")]
df_addnoise[df_addnoise$obj == typ$Combo,]
?match
match(df_addnoise$obj, typ$Combo)
typ$Typicality[match(df_addnoise$obj, typ$Combo)]
head(df_addnoise)
df_addnoise$Typicality = typ$Typicality[match(df_addnoise$obj, typ$Combo)]
typ[typ$Combo=='black_pepper',]
typ[typ$Combo=='pink_carrot',]
head(df_addnoise)
tail(df_addnoise)
typ[typ$Combo=='blue_banana',]
?merge
head(df_nonoise)
df_addnoise_final = df_addnoise(,c("condition","alpha","colorCost","typeCost","lengthWeight","noiseRate","typWeight","uttType","modelPrediction","Typicality"))
df_addnoise_final = df_addnoise[,c("condition","alpha","colorCost","typeCost","lengthWeight","noiseRate","typWeight","uttType","modelPrediction","Typicality")]
head(df_addnoise_final)
?match
merge(df_addnoise, df_nonoise, by.x = c("condition","alpha","colorCost","typeCost","lengthWeight","typWeight","uttType","Typicality"), by.y = c("condition","alpha","colorCost","typeCost","lengthWeight","typWeight","uttType","Typicality"),
all.x = FALSE, all.y = TRUE)
head(df_addnoise)
head(df_nonoise)
blub = merge(df_addnoise, df_nonoise, by.x = c("condition","alpha","colorCost","typeCost","lengthWeight","typWeight","uttType","Typicality"), by.y = c("condition","alpha","colorCost","typeCost","lengthWeight","typWeight","uttType","Typicality"),
all.x = FALSE, all.y = TRUE)
head(blub)
?merge
blub = merge(df_addnoise, df_nonoise, by.x = c("condition","alpha","colorCost","typeCost","lengthWeight","typWeight","uttType","Typicality"), by.y = c("condition","alpha","colorCost","typeCost","lengthWeight","typWeight","uttType","Typicality"),
all.x = FALSE, all.y = FALSE)
head(blub)
nrow(blub)
nrow(df_nonoise)
nrow(df_addnoise)
merge(df_addnoise, df_nonoise, by.x = c("condition","alpha","colorCost","typeCost","lengthWeight","typWeight","uttType","Typicality"), by.y = c("condition","alpha","colorCost","typeCost","lengthWeight","typWeight","uttType","Typicality"),
all.x = FALSE, all.y = TRUE)
blub = merge(df_addnoise, df_nonoise, by.x = c("condition","alpha","colorCost","typeCost","lengthWeight","typWeight","uttType","Typicality"), by.y = c("condition","alpha","colorCost","typeCost","lengthWeight","typWeight","uttType","Typicality"),
all.x = TRUE, all.y = TRUE)
head(blub)
blub = merge(df_addnoise, df_nonoise, by.x = c("condition","alpha","colorCost","typeCost","lengthWeight","typWeight","uttType","Typicality"), by.y = c("condition","alpha","colorCost","typeCost","lengthWeight","typWeight","uttType","Typicality"),
all.x = TRUE, all.y = FALSE)
blub = merge(df_addnoise, df_nonoise, by.x = c("condition","alpha","colorCost","typeCost","lengthWeight","typWeight","uttType","Typicality"), by.y = c("condition","alpha","colorCost","typeCost","lengthWeight","typWeight","uttType","Typicality"),
all.x = FALSE, all.y = TRUE)
tail(blub)
head(df_addnoise)
head(df_nonoise)
match(c(df_addnoise$Typicality,df_addnoise$alpha),c(df_nonoise$Typicality,df_nonoise$alpha))
match(c(df_addnoise$Typicality,df_addnoise$alpha,df_addnoise$condition,df_addnoise$colorCost,df_addnoise$typeCost,df_addnoise$lengthWeight,df_addnoise$typWeight,df_addnoise$uttType),c(df_nonoise$Typicality,df_nonoise$alpha,df_nonoise$condition,df_nonoise$colorCost,df_nonoise$typeCost,df_nonoise$lengthWeight,df_nonoise$typWeight,df_nonoise$uttType))
df_addnoise$empiricProb = df_nonoise[match(c(df_addnoise$Typicality,df_addnoise$alpha,df_addnoise$condition,df_addnoise$colorCost,df_addnoise$typeCost,df_addnoise$lengthWeight,df_addnoise$typWeight,df_addnoise$uttType),c(df_nonoise$Typicality,df_nonoise$alpha,df_nonoise$condition,df_nonoise$colorCost,df_nonoise$typeCost,df_nonoise$lengthWeight,df_nonoise$typWeight,df_nonoise$uttType))]
df_addnoise$empiricProb = df_nonoise[match(c(df_addnoise$Typicality,df_addnoise$alpha,df_addnoise$condition,df_addnoise$colorCost,df_addnoise$typeCost,df_addnoise$lengthWeight,df_addnoise$typWeight,df_addnoise$uttType),c(df_nonoise$Typicality,df_nonoise$alpha,df_nonoise$condition,df_nonoise$colorCost,df_nonoise$typeCost,df_nonoise$lengthWeight,df_nonoise$typWeight,df_nonoise$uttType))]
df_addnoise$empiricProb = df_nonoise[match(c(df_addnoise$Typicality,df_addnoise$condition,df_addnoise$colorCost,df_addnoise$typeCost,df_addnoise$lengthWeight,df_addnoise$typWeight,df_addnoise$uttType),c(df_nonoise$Typicality,df_nonoise$alpha,df_nonoise$condition,df_nonoise$colorCost,df_nonoise$typeCost,df_nonoise$lengthWeight,df_nonoise$typWeight,df_nonoise$uttType))]
df_addnoise$empiricProb = df_nonoise$empiricProb[match(c(df_addnoise$Typicality,df_addnoise$alpha,df_addnoise$condition,df_addnoise$colorCost,df_addnoise$typeCost,df_addnoise$lengthWeight,df_addnoise$typWeight,df_addnoise$uttType),c(df_nonoise$Typicality,df_nonoise$alpha,df_nonoise$condition,df_nonoise$colorCost,df_nonoise$typeCost,df_nonoise$lengthWeight,df_nonoise$typWeight,df_nonoise$uttType))]
match(c(df_addnoise$Typicality,df_addnoise$alpha,df_addnoise$condition,df_addnoise$colorCost,df_addnoise$typeCost,df_addnoise$lengthWeight,df_addnoise$typWeight,df_addnoise$uttType),c(df_nonoise$Typicality,df_nonoise$alpha,df_nonoise$condition,df_nonoise$colorCost,df_nonoise$typeCost,df_nonoise$lengthWeight,df_nonoise$typWeight,df_nonoise$uttType))
df_nonoise$empiricProb[match(c(df_addnoise$Typicality,df_addnoise$alpha,df_addnoise$condition,df_addnoise$colorCost,df_addnoise$typeCost,df_addnoise$lengthWeight,df_addnoise$typWeight,df_addnoise$uttType),c(df_nonoise$Typicality,df_nonoise$alpha,df_nonoise$condition,df_nonoise$colorCost,df_nonoise$typeCost,df_nonoise$lengthWeight,df_nonoise$typWeight,df_nonoise$uttType))]
??????
""
blub = merge(df_addnoise, df_nonoise, by.x = c("condition","alpha","colorCost","typeCost","lengthWeight","typWeight","uttType","Typicality"), by.y = c("condition","alpha","colorCost","typeCost","lengthWeight","typWeight","uttType","Typicality"))
head(blub)
head(df_addnoise)
head(df_nonoise)
trial = df_addnoise[1-15]
trial
df_addnoise[1-15]
trial = head(df_addnoise,n=15)
trial
blub = merge(trial, df_nonoise, by.x = c("condition","alpha","colorCost","typeCost","lengthWeight","typWeight","uttType","Typicality"), by.y = c("condition","alpha","colorCost","typeCost","lengthWeight","typWeight","uttType","Typicality"))
blub
blub2 = df_nonoise$empiricProb[match(c(trial$Typicality,trial$alpha,trial$condition,trial$colorCost,trial$typeCost,trial$lengthWeight,trial$typWeight,trial$uttType),c(df_nonoise$Typicality,df_nonoise$alpha,df_nonoise$condition,df_nonoise$colorCost,df_nonoise$typeCost,df_nonoise$lengthWeight,df_nonoise$typWeight,df_nonoise$uttType))]
blub2
blub2 = df_nonoise$empiricProb[match(c(df_nonoise$Typicality,df_nonoise$alpha,df_nonoise$condition,df_nonoise$colorCost,df_nonoise$typeCost,df_nonoise$lengthWeight,df_nonoise$typWeight,df_nonoise$uttType),c(trial$Typicality,trial$alpha,trial$condition,trial$colorCost,trial$typeCost,trial$lengthWeight,trial$typWeight,trial$uttType))]
blub2
blub2 = df_nonoise$empiricProb[match(c(trial$Typicality,trial$alpha,trial$condition,trial$colorCost,trial$typeCost,trial$lengthWeight,trial$typWeight,trial$uttType),c(df_nonoise$Typicality,df_nonoise$alpha,df_nonoise$condition,df_nonoise$colorCost,df_nonoise$typeCost,df_nonoise$lengthWeight,df_nonoise$typWeight,df_nonoise$uttType))]
blub2
trial
nrow(df_nonoise)
blub2 = match(c(trial$Typicality,trial$alpha,trial$condition,trial$colorCost,trial$typeCost,trial$lengthWeight,trial$typWeight,trial$uttType),c(df_nonoise$Typicality,df_nonoise$alpha,df_nonoise$condition,df_nonoise$colorCost,df_nonoise$typeCost,df_nonoise$lengthWeight,df_nonoise$typWeight,df_nonoise$uttType))
blub2
trial
?match
trial[trial$Typicality,]$uttType
trial = head(df_addnoise,n=15)
blub = merge(trial, df_nonoise, by.x = c("condition","uttType","Typicality"), by.y = c("condition","uttType","Typicality"))
blub
trial = head(df_addnoise,n=15)
blub2 = df_nonoise$empiricProb[match(c(trial$Typicality,trial$condition,trial$uttType),c(df_nonoise$Typicality,df_nonoise$condition,df_nonoise$uttType))]
blub2
blub2 = match(c(trial$Typicality,trial$condition,trial$uttType),c(df_nonoise$Typicality,df_nonoise$condition,df_nonoise$uttType))
blub2
blub2 = match(c(trial$Typicality),c(df_nonoise$Typicality))
blub2
blub2 = match(c(trial$Typicality,trial$condition),c(df_nonoise$Typicality,df_nonoise$condition))
blub2
blub2 = match(c(trial$Typicality,trial$uttType),c(df_nonoise$Typicality,df_nonoise$uttType))
blub2
blub2 = match(c(trial$Typicality,trial$condition,trial$uttType),c(df_nonoise$Typicality,df_nonoise$condition,df_nonoise$uttType))
blub2
blub = merge(trial, df_nonoise, by.x = c("condition","uttType","Typicality"), by.y = c("condition","uttType","Typicality"))
blub
blub3 = join(trial,df_nonoise,by='condition')
typ <- read.table(file="data/meantyp_short.csv",sep=",", header=T,check.names = FALSE)
typ$Combo = paste(typ$Color,typ$Item,sep = "_")
df_nonoise <- read.table(file="data/allDataPredictives.csv",sep=",", header=T,check.names = FALSE)
df_addnoise1 <- read.table(file="data/vizNoiseAddPredictives_1.csv",sep=",", header=T,check.names = FALSE)
df_addnoise2 <- read.table(file="data/vizNoiseAddPredictives_2.csv",sep=",", header=T,check.names = FALSE)
df_addnoise3 <- read.table(file="data/vizNoiseAddPredictives_3.csv",sep=",", header=T,check.names = FALSE)
df_addnoise <- rbind(df_addnoise1, df_addnoise2, df_addnoise3)
df_addnoise$Typicality = typ$Typicality[match(df_addnoise$obj, typ$Combo)]
df_addnoise = df_addnoise[,c("condition","alpha","colorCost","typeCost","lengthWeight","noiseRate","typWeight","uttType","modelPrediction","Typicality")]
blub = merge(df_addnoise,df_nonoise,by.x = c("condition","uttType","Typicality"), by.y = c("condition","uttType","Typicality"))
head(df_addnoise)
head(no)
head(df_nonoise)
empProb = df_nonoise[,c('condition','uttType','Typicality','empiricProb')]
head(empProb)
nrow(empProb)
nrow(df_nonoise)
unique(empProb)
empProb = droplevels(unique(empProb))
nrow(empProb)
empProb[empProb$condition == "informative",]
nrow(empProb[empProb$condition == "informative",])
nrow(empProb[empProb$condition == "overinformative",])
nrow(empProb[empProb$condition == "overinformative-cc",])
nrow(empProb[empProb$condition == "informative-cc",])
unique(empProb[empProb$condition == "informative-cc",]$Typicality)
left_join(df_addnoise,empProb)
joined = left_join(df_addnoise,empProb)
head(joined)
nrow(joined)
nrow(empProb)
nrow(df_addnoise)
tail(joined)
joined = left_join(trial,empProb)
joined
typ <- read.table(file="data/meantyp_short.csv",sep=",", header=T,check.names = FALSE)
typ$Combo = paste(typ$Color,typ$Item,sep = "_")
df_nonoise <- read.table(file="data/allDataPredictives.csv",sep=",", header=T,check.names = FALSE)
df_addnoise1 <- read.table(file="data/vizNoiseAddPredictives_1.csv",sep=",", header=T,check.names = FALSE)
df_addnoise2 <- read.table(file="data/vizNoiseAddPredictives_2.csv",sep=",", header=T,check.names = FALSE)
df_addnoise3 <- read.table(file="data/vizNoiseAddPredictives_3.csv",sep=",", header=T,check.names = FALSE)
df_addnoise <- rbind(df_addnoise1, df_addnoise2, df_addnoise3)
df_addnoise$Typicality = typ$Typicality[match(df_addnoise$obj, typ$Combo)]
df_addnoise = df_addnoise[,c("condition","alpha","colorCost","typeCost","lengthWeight","noiseRate","typWeight","uttType","modelPrediction","Typicality")]
trial = head(df_addnoise,n=15)
empProb = df_nonoise[,c('condition','uttType','Typicality','empiricProb')]
empProb = droplevels(unique(empProb))
joined = left_join(trial,empProb)
joined
trial$ID = range(1,15)
trial$ID = rownames(trial)
trial
empProb = df_nonoise[,c('condition','uttType','Typicality','empiricProb')]
empProb = droplevels(unique(empProb))
joined = left_join(trial,empProb)
joined
nrow(empProb)
unique(empProb$Typicality)
unique(df_addnoise$Typicality)
head(typ)
unique(typ)
unique(typ$Typicality)
x = unique(typ$Typicality)
y = unique(df_addnoise$Typicality)
x
y
order(x)
sort(x)
sort(y)
df_addnoise <- rbind(df_addnoise1, df_addnoise2, df_addnoise3)
df_addnoise$Typicality = typ$Typicality[match(df_addnoise$obj, typ$Combo)]
df_addnoise = df_addnoise[,c("condition","alpha","colorCost","typeCost","lengthWeight","noiseRate","typWeight","uttType","modelPrediction","Typicality","Combo")]
typ <- read.table(file="data/meantyp_short.csv",sep=",", header=T,check.names = FALSE)
typ$obj = paste(typ$Color,typ$Item,sep = "_")
df_nonoise <- read.table(file="data/allDataPredictives.csv",sep=",", header=T,check.names = FALSE)
df_addnoise1 <- read.table(file="data/vizNoiseAddPredictives_1.csv",sep=",", header=T,check.names = FALSE)
df_addnoise2 <- read.table(file="data/vizNoiseAddPredictives_2.csv",sep=",", header=T,check.names = FALSE)
df_addnoise3 <- read.table(file="data/vizNoiseAddPredictives_3.csv",sep=",", header=T,check.names = FALSE)
df_addnoise <- rbind(df_addnoise1, df_addnoise2, df_addnoise3)
df_addnoise$Typicality = typ$Typicality[match(df_addnoise$obj, typ$obj)]
df_addnoise = df_addnoise[,c("condition","alpha","colorCost","typeCost","lengthWeight","noiseRate","typWeight","uttType","modelPrediction","Typicality","obj")]
trial = head(df_addnoise,n=15)
trial$ID = rownames(trial)
empProb = df_nonoise[,c('condition','uttType','Typicality','empiricProb','obj')]
head(df_nonoise)
nrow(df_nonoise)
df_nonoise <- read.table(file="data/visualizationPredictives.csv",sep=",", header=T,check.names = FALSE)
head(df_nonoise)
df_nonoise$obj = df_nonoise$target
df_addnoise <- rbind(df_addnoise1, df_addnoise2, df_addnoise3)
df_addnoise$Typicality = typ$Typicality[match(df_addnoise$obj, typ$obj)]
df_addnoise = df_addnoise[,c("condition","alpha","colorCost","typeCost","lengthWeight","noiseRate","typWeight","uttType","modelPrediction","Typicality","obj")]
trial = head(df_addnoise,n=15)
trial$ID = rownames(trial)
empProb = df_nonoise[,c('condition','uttType','Typicality','empiricProb','obj')]
head(df_nonoise)
empProb = df_nonoise[,c('condition','uttType','empiricProb','obj')]
empRef <- read.table(file="data/empiricalReferenceProbs.csv",sep=",", header=T,check.names = FALSE)
head(empRef)
df_addnoise <- rbind(df_addnoise1, df_addnoise2, df_addnoise3)
df_addnoise$Typicality = typ$Typicality[match(df_addnoise$obj, typ$obj)]
df_addnoise <- rbind(df_addnoise1, df_addnoise2, df_addnoise3)
head(df_addnoise)
head(df_nonoise)
?rbind
df_nonoise$noiseRate <- 13
df_nonoise$noise <- 1
df_nonoise <- df_nonoise[,c('condition','obj', 'alpha','colorCost','typeCost','lengthWeight','typWeight','uttType','modelPrediction','noise','noiseRate')]
df_addnoise <- 2
df_addnoise <- df_addnoise[,c('condition','obj', 'alpha','colorCost','typeCost','lengthWeight','typWeight','uttType','modelPrediction','noise','noiseRate')]
head(df_addnoise)
df_addnoise <- rbind(df_addnoise1, df_addnoise2, df_addnoise3)
df_addnoise$noise <- 2
df_addnoise <- df_addnoise[,c('condition','obj', 'alpha','colorCost','typeCost','lengthWeight','typWeight','uttType','modelPrediction','noise','noiseRate')]
head(df_nonoise)
head(df_addnoise)
full_df <- rbind(df_addnoise,df_nonoise)
nrow(full_df)
head(empRef)
empRef$obj <- empRef$target
empRef <- empRef[,c('uttType','condition','empiricProb','obj')]
blub <- left_join(full_df,empRef)
head(blub)
head(empRef)
tail(blub)
is.na(blub$empiricProb)
is.na(blub$empiricProb)?TRUE:NULL
is.na(blub$empiricProb) ? TRUE : NULL
ifelse(is.na(blub$empiricProb),TRUE,NULL)
ifelse(is.na(blub$empiricProb),TRUE,"")
blub[is.na(blub$empiricProb),]
blub[is.na(blub$condition),]
blub <- left_join(full_df,empRef)
levels(blub)
nrow(full_df)
nrow(blub)
df <- left_join(full_df,empRef)
head(df)
df$Typicality = typ$Typicality[match(df$obj, typ$obj)]
head(df)
tail(df)
write.csv(df, "data/completeDataPredictives.csv", sep=",")
typ <- read.table(file="data/meantyp_short.csv",sep=",", header=T,check.names = FALSE)
typ$obj = paste(typ$Color,typ$Item,sep = "_")
df_nonoise <- read.table(file="data/visualizationPredictives.csv",sep=",", header=T,check.names = FALSE)
df_nonoise$obj = df_nonoise$target
empRef <- read.table(file="data/empiricalReferenceProbs.csv",sep=",", header=T,check.names = FALSE)
empRef$obj <- empRef$target
empRef <- empRef[,c('uttType','condition','empiricProb','obj')]
df_addnoise1 <- read.table(file="data/vizNoiseAddPredictives_1.csv",sep=",", header=T,check.names = FALSE)
df_addnoise2 <- read.table(file="data/vizNoiseAddPredictives_2.csv",sep=",", header=T,check.names = FALSE)
df_addnoise3 <- read.table(file="data/vizNoiseAddPredictives_3.csv",sep=",", header=T,check.names = FALSE)
df_addnoise4 <- read.table(file="data/vizNoiseAddPredictives_4.csv",sep=",", header=T,check.names = FALSE)
df_addnoise4 <- read.table(file="data/vizNoiseAddPredictives_4.csv",sep=",", header=T,check.names = FALSE)
df_addnoise <- rbind(df_addnoise1, df_addnoise2, df_addnoise3, df_addnoise4)
df_nonoise$noiseRate <- 13
df_nonoise$noise <- 1
df_nonoise <- df_nonoise[,c('condition','obj', 'alpha','colorCost','typeCost','lengthWeight','typWeight','uttType','modelPrediction','noise','noiseRate')]
df_addnoise$noise <- 2
df_addnoise <- df_addnoise[,c('condition','obj', 'alpha','colorCost','typeCost','lengthWeight','typWeight','uttType','modelPrediction','noise','noiseRate')]
full_df <- rbind(df_addnoise,df_nonoise)
df <- left_join(full_df,empRef)
df$Typicality = typ$Typicality[match(df$obj, typ$obj)]
write.csv(df, "data/completeDataPredictives.csv")
shiny::runApp('app')
install.packages(here)
install.packages("here")
library(dplyr)
library(ggplot2)
library(bootstrap)
library(lme4)
library(tidyr)
library(here)
setwd("/Users/elisakreiss/Documents/Business/Projects/Overinformativeness/overinformativeness/experiments/elisa_paper_relevant/interactiveReferenceGame/results")
set_here()
here()
library(dplyr)
library(ggplot2)
library(bootstrap)
library(lme4)
library(tidyr)
library(here)
theme_set(theme_bw(18))
here()
here::here()
